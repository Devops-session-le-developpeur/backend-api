# ‚úÖ Name of the Workflow
name: Pipeline CI/CD Backend-api

# ‚úÖ Trigger this workflow on push to main branch
on:
  push:
    branches:
      - main

env:
  Docker_IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/api-backend-devops

jobs:
  run-unit-test-job:
    runs-on: ubuntu-latest
    steps:
      - name: clone soure code
        uses: actions/checkout@v5

      - name: install dependencies
        run: npm install

      - name: run unit test
        run: npm run test

  sonarqube-code-quality-scan-job:
    runs-on: ubuntu-latest
    needs: run-unit-test-job
    steps:
      - name: Clone Source Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm install

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          # SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  snyk-code-security-scan-job:
    runs-on: ubuntu-latest
    needs: run-unit-test-job
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js (if applicable)
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install Dependency Scanning Tool (Snyk)
        run: npm install -g snyk

      - name: Snyk Authentication
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Run Snyk Test (Continue on error to capture results)
        id: snyk-test
        run: |
          # Run snyk test but don't fail immediately
          snyk test --all-projects || echo "exit_code=$?" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Run Snyk Monitor and Capture URL
        id: snyk-monitor
        run: |
          # Always run monitor to get the URL, even if test failed
          MONITOR_OUTPUT=$(snyk monitor --all-projects --org=abdelwahebslama)
          echo "Monitor output: $MONITOR_OUTPUT"

          # Extract monitor URL
          MONITOR_URL=$(echo "$MONITOR_OUTPUT" | grep -o 'https://app.snyk.io/org/[^ ]*' | head -1 || echo "")

          if [ -z "$MONITOR_URL" ]; then
            MONITOR_URL=$(echo "$MONITOR_OUTPUT" | grep -o 'https://app.snyk.io/[^ ]*' | head -1 || echo "")
          fi

          if [ -z "$MONITOR_URL" ]; then
            MONITOR_URL="https://app.snyk.io/org/abdelwahebslama/projects"
          fi

          echo "monitor_url=$MONITOR_URL" >> $GITHUB_OUTPUT
          echo "Captured monitor URL: $MONITOR_URL"

      - name: Fail pipeline if vulnerabilities found
        run: |
          # Check if the previous test step failed
          if [ "${{ steps.snyk-test.outcome }}" == "failure" ]; then
            echo "‚ùå Snyk test found vulnerabilities - failing pipeline"
            exit 1
          fi

      - name: Notify Slack on Success
        if: success()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "‚úÖ *Snyk Security Scan Successful* ‚úÖ\nüîÅ Branch: `${{ github.ref_name }}`\nüèó Build: `${{ github.run_number }}`\nüîó [View Workflow](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\nüìä [View Snyk Dashboard](${{ steps.snyk-monitor.outputs.monitor_url }})"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Notify Slack on Failure
        if: failure()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "‚ùå *Snyk Security Scan Failed for Backend-api* ‚ùóÔ∏è\nüîÅ Branch: `${{ github.ref_name }}`\nüîó [View Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\nüìä [View Snyk Dashboard](${{ steps.snyk-monitor.outputs.monitor_url }})\n‚ö†Ô∏è Vulnerabilities were detected in the code"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
    # runs-on: ubuntu-latest
    # needs: run-unit-test-job
    # steps:
    #   - name: Checkout Code
    #     uses: actions/checkout@v4

    #   - name: Install Dependency Scanning Tool (Snyk)
    #     run: npm install -g snyk
    #   - name: SNYK_TOKEN
    #     run: echo ${{ secrets.SNYK_TOKEN }}

    #   - name: Snyk Authentication
    #     run: snyk auth ${{ secrets.SNYK_TOKEN }}

    #   - name: Run Snyk Test (Continue on error to capture results)
    #     id: snyk-test
    #     run: |
    #       # Run snyk test but don't fail immediately
    #       snyk test --all-projects || echo "exit_code=$?" >> $GITHUB_OUTPUT
    #     continue-on-error: true

    #   - name: Run Snyk Monitor and Capture URL
    #     id: snyk-monitor
    #     run: |
    #       # Always run monitor to get the URL, even if test failed
    #       MONITOR_OUTPUT=$(snyk monitor --all-projects --org=talel12)
    #       echo "Monitor output: $MONITOR_OUTPUT"

    #       # Extract monitor URL
    #       MONITOR_URL=$(echo "$MONITOR_OUTPUT" | grep -o 'https://app.snyk.io/org/[^ ]*' | head -1 || echo "")

    #       if [ -z "$MONITOR_URL" ]; then
    #         MONITOR_URL=$(echo "$MONITOR_OUTPUT" | grep -o 'https://app.snyk.io/[^ ]*' | head -1 || echo "")
    #       fi

    #       if [ -z "$MONITOR_URL" ]; then
    #         MONITOR_URL="https://app.snyk.io/org/talel12/projects"
    #       fi

    #       echo "monitor_url=$MONITOR_URL" >> $GITHUB_OUTPUT
    #       echo "Captured monitor URL: $MONITOR_URL"

    #   - name: Fail pipeline if vulnerabilities found
    #     run: |
    #       # Check if the previous test step failed
    #       if [ "${{ steps.snyk-test.outcome }}" == "failure" ]; then
    #         echo "‚ùå Snyk test found vulnerabilities - failing pipeline"
    #         exit 1
    #       fi

    #   - name: Notify Slack on Success
    #     if: success()
    #     uses: slackapi/slack-github-action@v1.23.0
    #     with:
    #       payload: |
    #         {
    #           "text": "‚úÖ *Snyk Security Scan Successful* ‚úÖ\nüîÅ Branch: `${{ github.ref_name }}`\nüèó Build: `${{ github.run_number }}`\nüîó [View Workflow](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\nüìä [View Snyk Dashboard](${{ steps.snyk-monitor.outputs.monitor_url }})"
    #         }
    #     env:
    #       SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

    #   - name: Notify Slack on Failure
    #     if: failure()
    #     uses: slackapi/slack-github-action@v1.23.0
    #     with:
    #       payload: |
    #         {
    #           "text": "‚ùå *Snyk Security Scan Failed for Backend-api* ‚ùóÔ∏è\nüîÅ Branch: `${{ github.ref_name }}`\nüîó [View Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\nüìä [View Snyk Dashboard](${{ steps.snyk-monitor.outputs.monitor_url }})\n‚ö†Ô∏è Vulnerabilities were detected in the code"
    #         }
    #     env:
    #       SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

    # - name: Run Snyk Vulnerability test
    #   run: snyk test

    # - name: Run Snyk Vulnerability Scan
    #   run: snyk monitor --all-projects --org=abdelwahebslama
  
  trivy-image-security-scan-job:
      runs-on: ubuntu-latest
      needs: run-unit-test-job
      steps:      
        - name: Checkout Code
          uses: actions/checkout@v4

        - name: Install dependencies
          run: sudo apt-get update && sudo apt-get install -y curl

        - name: Download and install Trivy
          run: |
            curl -sSL https://github.com/aquasecurity/trivy/releases/download/v0.29.0/trivy_0.29.0_Linux-64bit.tar.gz -o trivy.tar.gz
            tar xzvf trivy.tar.gz
            sudo mv trivy /usr/local/bin/
            trivy --version

        - name: Run Trivy file system vulnerability scan
          run: |
            trivy fs --exit-code 1 --severity CRITICAL .

        - name: Build Docker image
          run: |
            pwd
            ls
            docker buildx build -t ${{ env.Docker_IMAGE }} ./Dockerfile

        - name: Run Trivy Docker image vulnerability scan
          run: |
            trivy image --exit-code 1 --severity CRITICAL ${{ env.Docker_IMAGE }}
            
  build-docker-image-and-push:
    runs-on: ubuntu-latest
    needs: [sonarqube-code-quality-scan-job, snyk-code-security-scan-job, trivy-image-security-scan-job]
    steps:
      - name: clone Source code
        uses: actions/checkout@v5
      - name: build docker image
        run: docker build -t ${{ env.Docker_IMAGE }} .

      - run: docker images
      - run: docker tag ${{ env.Docker_IMAGE }} ${{ env.Docker_IMAGE }}:v${{ github.run_number }}
      - run: docker images
      - run: echo ${{ vars.DOCKERHUB_USERNAME }}
      - run: echo   ${{ secrets.DOCKERHUB_TOKEN }}

      - name: login to docker hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: push docker hub image  latest
        run: docker push ${{ env.Docker_IMAGE }}:v${{ github.run_number }}

      - name: push docker hub image  latest
        run: docker push ${{ env.Docker_IMAGE }}:latest

  deploey-docker-image:
    name: Build
    needs: build-docker-image-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Execute remote SSH commands using password
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: user
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            cd /home/user/session13/devops_script/backend-api/dev
            sudo docker compose pull  api
            sudo docker compose up -d --force-recreate --remove-orphans api
